name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # First job to dynamically determine modules
  setup:
    runs-on: ubuntu-latest
    outputs:
      modules: ${{ steps.set-modules.outputs.modules }}
    steps:
      - uses: actions/checkout@v4

      - id: set-modules
        name: Get modules from go.work
        run: |
          # Get modules from Makefile in JSON format
          MODULES=$(make list-modules FORMAT=json)
          echo "modules=$MODULES" >> $GITHUB_OUTPUT
          echo "Found modules: $MODULES"

  test:
    needs:
      - setup
      - build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.setup.outputs.modules) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Test and check coverage for ${{ matrix.module }}
        run: |
          # Use the centralized script for both testing and coverage check
          ./scripts/check-coverage.sh ${{ matrix.module }} 100

      - name: Upload coverage
        if: matrix.module != 'examples'
        uses: codecov/codecov-action@v5
        with:
          files: ./${{ matrix.module }}/coverage.out
          flags: ${{ matrix.module }}
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Build tools
        run: make build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: bin/

  lint:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.setup.outputs.modules) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: golangci-lint ${{ matrix.module }}
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          working-directory: ${{ matrix.module }}
          args: --timeout=5m

  validate-openapi:
    needs:
      - build
      - test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        format: [json, yaml]
        source:
          - { dir: ./examples }
    steps:
      - uses: actions/checkout@v4

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: bin/

      - name: Make openapi-gen executable
        run: chmod +x bin/gork

      - name: Generate OpenAPI spec (${{ matrix.format }})
        run: |
          echo "Generating OpenAPI ${{ matrix.format }} spec for ${{ matrix.source.dir }}..."

          ./bin/gork openapi generate --build ${{ matrix.source.dir }}/cmd/openapi_export --source ${{ matrix.source.dir }} --output ${{ matrix.source.dir }}/openapi-new.${{ matrix.format }}

      - name: Validate OpenAPI spec with Swagger validator
        id: swagger-validate
        continue-on-error: true
        run: |
          if [ -f "${{ matrix.source.dir }}/openapi-new.${{ matrix.format }}" ]; then
            echo "Validating ${{ matrix.source.dir }}/openapi-new.${{ matrix.format }}..."
            if ./scripts/validate-openapi.sh ${{ matrix.source.dir }}/openapi-new.${{ matrix.format }}; then
              echo "validation_status=success" >> $GITHUB_OUTPUT
            else
              echo "validation_status=failed" >> $GITHUB_OUTPUT
              echo "::warning::Swagger validation failed for ${{ matrix.source.dir }}/openapi-new.${{ matrix.format }}"
            fi
          else
            echo "validation_status=skipped" >> $GITHUB_OUTPUT
          fi

      - name: Compare with existing spec
        run: |
          if [ -f "${{ matrix.source.dir }}/openapi.${{ matrix.format }}" ] && [ -f "${{ matrix.source.dir }}/openapi-new.${{ matrix.format }}" ]; then
            echo "Comparing ${{ matrix.source.dir }}/openapi.${{ matrix.format }}..."
            if ! diff -u ${{ matrix.source.dir }}/openapi.${{ matrix.format }} ${{ matrix.source.dir }}/openapi-new.${{ matrix.format }}; then
              echo "ERROR: OpenAPI ${{ matrix.format }} spec has changed!"
              echo "If this is intentional, please update the committed spec file."
              exit 1
            fi
            echo "âœ“ OpenAPI ${{ matrix.format }} spec matches the committed version"
          elif [ -f "${{ matrix.source.dir }}/openapi-new.${{ matrix.format }}" ]; then
            echo "WARNING: ${{ matrix.source.dir }}/openapi.${{ matrix.format }} does not exist, skipping comparison"
          fi

      - name: Check validation status
        if: steps.swagger-validate.outputs.validation_status == 'failed'
        run: |
          echo "ERROR: Swagger validation failed for ${{ matrix.source.dir }}/openapi.${{ matrix.format }}"
          echo "Please check the validation errors above and fix the OpenAPI specification."
          exit 1
