{
  "openapi": "3.1.0",
  "info": {
    "title": "Example API",
    "version": "1.0.0"
  },
  "paths": {
    "/api/v1/auth/login": {
      "post": {
        "operationId": "Login",
        "description": "Login handles user login requests.",
        "tags": [
          "auth"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "operationId": "ListUsers",
        "description": "ListUsers handles listing all users.",
        "tags": [
          "users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Limit is the maximum number of users to return",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Offset is the number of users to skip",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUsersResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "operationId": "CreateUser",
        "description": "CreateUser handles user creation requests.",
        "tags": [
          "users"
        ],
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "return-to",
            "in": "query",
            "required": false,
            "description": "ReturnTo specifies where to redirect after user creation",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserType"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/users/{userId}": {
      "get": {
        "operationId": "GetUser",
        "description": "GetUser handles user retrieval requests.",
        "tags": [
          "users"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "UserID is the ID of the user to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserType"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "operationId": "UpdateUser",
        "description": "UpdateUser handles user update requests.",
        "tags": [
          "users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "UserID is the ID of the user to update",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-User-Version",
            "in": "header",
            "required": false,
            "description": "Version specifies the user version for concurrency control",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserType"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "operationId": "DeleteUser",
        "description": "DeleteUser handles user deletion requests.",
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "UserID is the ID of the user to delete",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Force specifies whether to force deletion",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUserBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/users/{userId}/payment-method": {
      "put": {
        "operationId": "UpdateUserPaymentMethod",
        "description": "UpdateUserPaymentMethod handles user payment method update requests.",
        "tags": [
          "users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankOrCreditBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/users/{userId}/preferences": {
      "put": {
        "operationId": "UpdateUserPreferences",
        "description": "UpdateUserPreferences handles user preferences update requests.",
        "tags": [
          "users"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "UserID is the ID of the user whose preferences are being updated",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserPreferencesBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AdminUserType": {
        "type": "object",
        "title": "AdminUserType",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "CreatedAt is when the user was created"
          },
          "updatedAt": {
            "type": "string",
            "description": "UpdatedAt is when the user was last updated"
          },
          "userID": {
            "type": "string",
            "description": "UserID is the ID of the user"
          },
          "username": {
            "type": "string",
            "description": "Username is the username of the user"
          }
        },
        "description": "AdminUserType represents admin user data structure."
      },
      "BankOrCreditBody": {
        "type": "object",
        "title": "BankOrCreditBody"
      },
      "BankPaymentMethod": {
        "type": "object",
        "title": "BankPaymentMethod",
        "properties": {
          "accountNumber": {
            "type": "string",
            "description": "AccountNumber is the bank account number"
          },
          "routingNumber": {
            "type": "string",
            "description": "RoutingNumber is the bank routing number"
          },
          "type": {
            "type": "string",
            "description": "Type is the payment method type discriminator"
          }
        },
        "required": [
          "type",
          "accountNumber",
          "routingNumber"
        ],
        "description": "BankPaymentMethod represents a bank account payment method."
      },
      "CreateUserBody": {
        "type": "object",
        "title": "CreateUserBody",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username is the username of the user to create"
          }
        },
        "required": [
          "username"
        ]
      },
      "CreditCardPaymentMethod": {
        "type": "object",
        "title": "CreditCardPaymentMethod",
        "properties": {
          "cardNumber": {
            "type": "string",
            "description": "CardNumber is the credit card number"
          },
          "type": {
            "type": "string",
            "description": "Type is the payment method type discriminator"
          }
        },
        "required": [
          "type",
          "cardNumber"
        ],
        "description": "CreditCardPaymentMethod represents a credit card payment method."
      },
      "DeleteUserBody": {
        "type": "object",
        "title": "DeleteUserBody",
        "properties": {
          "userID": {
            "type": "string",
            "description": "UserID is the ID of the user to delete"
          }
        },
        "required": [
          "userID"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "title": "ErrorResponse",
        "properties": {
          "details": {
            "type": "object",
            "description": "Additional error details"
          },
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "Generic error response structure"
      },
      "ListUsersResponse": {
        "title": "ListUsersResponse",
        "oneOf": [
          {
            "type": "array",
            "title": "[]AdminUserType",
            "description": "Array of AdminUserType",
            "items": {
              "$ref": "#/components/schemas/AdminUserType"
            }
          },
          {
            "type": "array",
            "title": "[]UserType",
            "description": "Array of UserType",
            "items": {
              "$ref": "#/components/schemas/UserType"
            }
          }
        ],
        "description": "ListUsersResponse represents the response for listing users."
      },
      "LoginResponse": {
        "type": "object",
        "title": "LoginResponse",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token is the JWT token for the authenticated user"
          }
        },
        "description": "LoginResponse represents the response body for the login endpoint."
      },
      "UpdateUserBody": {
        "type": "object",
        "title": "UpdateUserBody",
        "properties": {
          "userID": {
            "type": "string",
            "description": "UserID is the ID of the user to update"
          },
          "username": {
            "type": "string",
            "description": "Username is the new username for the user"
          }
        },
        "required": [
          "userID",
          "username"
        ]
      },
      "UpdateUserPreferencesBody": {
        "type": "object",
        "title": "UpdateUserPreferencesBody",
        "properties": {
          "paymentMethod": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BankPaymentMethod"
              },
              {
                "$ref": "#/components/schemas/CreditCardPaymentMethod"
              }
            ],
            "description": "PaymentMethod contains the user's payment method"
          },
          "primaryNotificationChannel": {
            "type": "string",
            "description": "PrimaryNotificationChannel is the user's preferred notification channel",
            "enum": [
              "email",
              "sms",
              "push"
            ]
          }
        },
        "required": [
          "paymentMethod",
          "primaryNotificationChannel"
        ]
      },
      "UserType": {
        "type": "object",
        "title": "UserType",
        "properties": {
          "userID": {
            "type": "string",
            "description": "UserID is the ID of the user"
          },
          "username": {
            "type": "string",
            "description": "Username is the username of the user"
          }
        },
        "description": "UserType represents user data structure."
      },
      "ValidationErrorResponse": {
        "type": "object",
        "title": "ValidationErrorResponse",
        "properties": {
          "details": {
            "type": "object",
            "description": "Field-level validation errors (maps field names to arrays of error messages)"
          },
          "error": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "error"
        ],
        "description": "Validation error response with field-level details"
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      },
      "BasicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request - Validation failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationErrorResponse"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "UnprocessableEntity": {
        "description": "Unprocessable Entity - Request body could not be parsed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    }
  }
}
